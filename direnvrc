#! /usr/bin/env bash

if [ "$(command -v nodenv)" ]; then
  NODE_VERSIONS="$(nodenv root)/versions"
  NODE_VERSION_PREFIX=''
  export NODE_VERSIONS NODE_VERSION_PREFIX
fi

# https://github.com/direnv/direnv/wiki/Python#venv-stdlib-module
realpath() {
  [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}
layout_python-venv() {
  local python=${1:-python3}
  [[ $# -gt 0 ]] && shift
  unset PYTHONHOME
  if [[ -n $VIRTUAL_ENV ]]; then
    VIRTUAL_ENV=$(realpath "${VIRTUAL_ENV}")
  else
    local python_version
    python_version=$("$python" -c "import platform; print(platform.python_version())")
    if [[ -z $python_version ]]; then
      log_error "Could not detect Python version"
      return 1
    fi
    VIRTUAL_ENV=$PWD/.direnv/python-venv-$python_version
  fi
  export VIRTUAL_ENV
  if [[ ! -d $VIRTUAL_ENV ]]; then
    log_status "no venv found; creating $VIRTUAL_ENV"
    "$python" -m venv "$VIRTUAL_ENV"
  fi
  PATH_add "$VIRTUAL_ENV/bin"
}

# https://stackoverflow.com/a/24067243
version_gte() {
  test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1";
}

use_python() {
  local python_version=$1

  if [ -n "$(command -v pyenv)" ]; then
    load_prefix "$(pyenv root)/versions/${python_version}"
  fi

  if version_gte "$python_version" 3.3; then
    layout_python-venv python3
  else
    layout_python
  fi
}

use_ruby() {
  if [ -n "$(command -v rbenv)" ]; then
    load_prefix "$(rbenv root)/versions/${1}"
    layout_ruby
  fi
}
